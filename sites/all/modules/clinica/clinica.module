<?php

require_once 'reports/ReportSchedules.php';

function clinica_node_insert($node){
  if ($node->type == "pet"){
    $updateNode = node_load($node->nid);
    $updateNode->title = $node->title . ' - ' . $node->name;
    node_save($updateNode);
  }
}

/**
 * @return array[]
 */
function clinica_theme()
{
  return array(
    'clinica_report_scheduler' => array(
      'path' =>  drupal_get_path('module', 'clinica'),
      'template' => 'templates/clinica_scheduler',
      'variables' => array('dados' => NULL),
    ),
    'clinica_modal' => array(
      'path' =>  drupal_get_path('module', 'clinica'),
      'template' => 'templates/clinica_modal',
      'variables' => array('dados' => NULL),
    ),
    'clinica_report_table_theme' => array(
      'function' => '_bootstrap_avanz_table',
      'variables' => array('variables' => array()),
    ),
  );
}


function clinica_user_login(&$edit, $account) {
  drupal_goto('user-page');
}

/**
 * Implementation of hook_menu().
 */
function clinica_menu() {

  $menuitems['report-pet'] = array(
    'title' => 'Pets',
    'page callback' => '_pets_list',
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $menuitems['schedules'] = array(
    'title' => 'Agendametos',
    'page callback' => '_my_scheduler_list',
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['schedules/download'] = [
    'title' => 'Relatório - Agendamentos',
    'description' => 'Download do relatório de agendamentos.',
    'access callback' => 'user_is_logged_in',
    'page callback' => '_clinica_scheduler_download',
    'type' => MENU_CALLBACK,
  ];

  $menuitems['sobre-nos'] = array(
    'title' => 'Quem Somos',
    'page callback' => 'clinica_mymenu_page_callback',
    'access callback' => 'user_is_anonymous',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $menuitems['Serviços'] = array(
    'title' => 'Serviços',
    'page callback' => 'clinica_mymenu_page_callback',
    'access callback' => 'user_is_anonymous',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $menuitems['login'] = array(
    'title' => 'Entrar',
    'page callback' => '_login_page',
    'access callback' => 'user_is_anonymous',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );


  return $menuitems;

}


/**
 * @return string
 */
function _login_page() {
  $result = "<div class='login-wrapper'>";
  $result = "<a class='login-link' href='/user'>Login</a> <br>";
  $result.="<a class='register-link' href='/user/register'>Registrar-se</a>";
  $result.="</div>";
  return $result;
}

function _pets_list() {
  return views_embed_view('pet_s', 'page');
}


/**
 * @return string
 * @throws Exception
 */
function _my_scheduler_list() {
  global $user;
  if (in_array('Tutor', $user->roles)){
    return report_schedules()->getTable($user);
  }

  return report_schedules()->getTable();
}

/**
 * Callback para a o download da listagem do relatório de agendamentos
 *
 * @return string
 * @throws Exception
 */
function _clinica_scheduler_download()
{
  global $user;
  if (in_array('Tutor', $user->roles)){
    return report_schedules()->toDownload()->getTable($user);
  }

  return report_schedules()->toDownload()->getTable();
}


/**
 * @param $variables
 * @return string
 */
function _bootstrap_avanz_table($variables)
{
  $header = isset($variables['header']) ? $variables['header'] : array();
  $rows = isset($variables['rows']) ? $variables['rows'] : array();
  $attributes = isset($variables['attributes']) ? $variables['attributes'] : array();
  $caption = isset($variables['caption']) ? $variables['caption'] : null;
  $colgroups = isset($variables['colgroups']) ? $variables['colgroups'] : array();
  $sticky = isset($variables['sticky']) ? $variables['sticky'] : null;
  $empty = isset($variables['empty']) ? $variables['empty'] : null;

  // Add sticky headers, if applicable.
  if (count($header) && $sticky) {
    drupal_add_js('misc/tableheader.js');
    // Add 'sticky-enabled' class to the table to identify it for JS.
    // This is needed to target tables constructed by this function.
    $attributes['class'][] = 'sticky-enabled';
  }

  $output = '<table' . drupal_attributes($attributes) . ">\n";

  if (isset($caption) && !empty($caption)) {
    $output .= '<caption>' . $caption . "</caption>\n";
  }

  // Add the 'empty' row message if available.
  if (!count($rows) && $empty) {
    $header_count = 0;
    foreach ($header as $header_cell) {
      if (is_array($header_cell)) {
        $header_count += isset($header_cell['colspan']) ? $header_cell['colspan'] : 1;
      } else {
        $header_count++;
      }
    }
    $rows[] = array(array('data' => $empty, 'colspan' => $header_count, 'class' => array('empty', 'message')));
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    // HTML requires that the thead tag has tr tags in it followed by tbody
    // tags. Using ternary operator to check and see if we have any rows.
    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');

    /* */
    if (isset($header[0])) {
      $trs = array();
      foreach ($header as $head) {
        $tds = '';
        foreach ($head as $cell) {
          $cell = tablesort_header($cell, $head, $ts);
          $tds .= _theme_table_cell($cell, TRUE);
        }
        $trs[] .= $tds;
      }
      $output .= join('</tr><tr>', $trs);
    }else {
      foreach ($header as $cell) {
        $cell = tablesort_header($cell, $header, $ts);
        $output .= _theme_table_cell($cell, TRUE);
      }
    }/* */

    // Using ternary operator to close the tags based on whether or not there are rows
    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");
  } else {
    $ts = array();
  }

  // Format the table rows:
  if (count($rows)) {
    $output .= "<tbody>\n";
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class = 'even';
    foreach ($rows as $number => $row) {
      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        $cells = $row['data'];
        $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

        // Set the attributes array and exclude 'data' and 'no_striping'.
        $attributes = $row;
        unset($attributes['data']);
        unset($attributes['no_striping']);
      } else {
        $cells = $row;
        $attributes = array();
        $no_striping = FALSE;
      }
      if (count($cells)) {
        // Add odd/even class
        if (!$no_striping) {
          $class = $flip[$class];
          $attributes['class'][] = $class;
        }

        // Build row
        $output .= ' <tr' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cells as $cell) {
          $cell = tablesort_cell($cell, $header, $ts, $i++);
          $output .= _theme_table_cell($cell);
        }
        $output .= " </tr>\n";
      }
    }
    $output .= "</tbody>\n";
  }

  $output .= "</table>\n";
  return $output;
}

function __bootstrap_avanz_theme_table_cell($cell, $header = FALSE)
{
  $attributes = '';

  if (is_array($cell)) {
    $data = isset($cell['data']) ? $cell['data'] : '';
    // Cell's data property can be a string or a renderable array.
    if (is_array($data)) {
      $data = drupal_render($data);
    }
    $header |= isset($cell['header']);
    unset($cell['data']);
    unset($cell['header']);
    $attributes = drupal_attributes($cell);
  }
  else {
    $data = $cell;
  }
  if ($header) {
    $output = "<th$attributes>$data</th>";
  }
  else {
    $output = "<td$attributes>$data</td>";
  }

  return $output;
}







